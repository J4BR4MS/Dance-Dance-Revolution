import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.sound.sampled.Clip;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;

public class Game implements ActionListener {
    final private int SLEEP_TIME = 100;
    final private int GAME_LENGTH = 50;

    final private Score score;
    final private Timer clock;
    final private DDRViewer window;
    final private FallingNote[] sequence;

    public Game(){
        this.window = new DDRViewerDoubleBuffer(this);
        sequence = new FallingNote[GAME_LENGTH];
        clock = new Timer(SLEEP_TIME, this);
        score = new Score(window);
    }

    public static void main(String[] args){
        Game g = new Game();
        g.createSequence();
        g.playSound("Resources/backgroundMusic.wav");
        g.run();
    }
    private void run(){
        clock.start();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        for(int i = 0; i < sequence.length; i++) {
                sequence[i].move();
        }
        window.repaint();
    }

    public void playSound(String soundFile){
        try {
            File file = new File(soundFile);
            AudioInputStream stream;
            AudioFormat format;
            DataLine.Info info;
            Clip clip;
            stream = AudioSystem.getAudioInputStream(file);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
//            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
//            gainControl.setValue(gainControl.getValue() + volIncrease);
            clip.start();
        }
        catch (Exception e){
        }
    }

    public void changeFrontNote(FallingNote isFrontNote){
        if(window.getFrontNote() == isFrontNote){
            window.increaseFrontNoteNumber();
            score.streak(false);
            window.setFrontNote(sequence[window.getFrontNoteNumber()]);
            score.subtractPoint();
        }
    }

    public Score getScoreObj(){
        return score;
    }

    public FallingNote[] getSequence(){
        return sequence;
    }
    private void createSequence(){
        for(int i = 0; i < sequence.length; i++){
            sequence[i] = new FallingNote((int) (Math.random() * 4), 350*i, window);
        }
    }
}
