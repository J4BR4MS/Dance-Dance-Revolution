import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.*;


public class DDRViewer extends JFrame implements KeyListener {
    final private int WINDOW_WIDTH = 1000;
    final private int WINDOW_HEIGHT = 1000;
    final private int buttonY = WINDOW_HEIGHT - 161;

    final private Game game;
    private FallingNote frontNote;

    final private Button up;
    final private Button down;
    final private Button right;
    final private Button left;

    final private Image background;
    final private Image explosion;

    private int frontNoteNumber;
    private int drawExplosion;
    private int frontNoteFinalY;
    private int frontNoteX;


    public DDRViewer(Game game) {
        this.game = game;
        drawExplosion = 3;
        frontNoteNumber = 0;


        setTitle("Dance Dance Revolution");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);


        // Create the up arrow
        ImageIcon upIcon = new ImageIcon("Resources/upArrowButton.png");
        Image upImage = upIcon.getImage(); //is this line necessary? Why do I need a variable for this? Below I can just use this code instead of a variable.
        up = new Button(upImage, WINDOW_WIDTH / 2 - 57, buttonY, upIcon.getIconWidth() / 10, upIcon.getIconHeight() / 10, this);
//        buttonWidth = upIcon.getIconWidth()/10;

        // Create the down arrow
        ImageIcon downIcon = new ImageIcon("Resources/downArrowButton.png");
        Image downImage = downIcon.getImage();
        down = new Button(downImage, WINDOW_WIDTH / 2 + 57, buttonY, upIcon.getIconWidth() / 10, downIcon.getIconHeight() / 10, this);

        // Create the right arrow
        ImageIcon rightIcon = new ImageIcon("Resources/rightArrowButton.png");
        Image rightImage = rightIcon.getImage();
        right = new Button(rightImage, WINDOW_WIDTH / 2 + 170, buttonY, rightIcon.getIconWidth() / 10, rightIcon.getIconHeight() / 10, this);

        // Create the left arrow
        ImageIcon leftIcon = new ImageIcon("Resources/leftArrowButton.png");
        Image leftImage = leftIcon.getImage();
        left = new Button(leftImage, WINDOW_WIDTH / 2 - 170, buttonY, leftIcon.getIconWidth() / 10, leftIcon.getIconHeight() / 10, this);

        ImageIcon backgroundIcon = new ImageIcon("Resources/Background.png");
        background = backgroundIcon.getImage();

        ImageIcon explosionIcon = new ImageIcon("Resources/explosion.png");
        explosion = explosionIcon.getImage();


        // Add key listener and set visibility
        addKeyListener(this);
        setVisible(true);
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    @Override
    public void keyTyped(KeyEvent e) {}
    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        frontNote = game.getSequence()[frontNoteNumber];
        if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_W) {
            if(frontNote.inFieldOfPlay() && frontNote.getDirection() == 0){
                game.getScoreObj().streak(true);
                correctChoice(frontNote);
            }
            else{
                game.getScoreObj().streak(false);
            }
        }
        if(keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_S) {
            if(frontNote.inFieldOfPlay() && frontNote.getDirection() == 1){
                game.getScoreObj().streak(true);
                correctChoice(frontNote);
            }
            else{
                game.getScoreObj().streak(false);
            }
        }

        if(keyCode == KeyEvent.VK_RIGHT || keyCode == KeyEvent.VK_D) {
            if(frontNote.inFieldOfPlay() && frontNote.getDirection() == 2){
                game.getScoreObj().streak(true);
                correctChoice(frontNote);
            }
            else{
                game.getScoreObj().streak(false);
            }
        }

        if(keyCode == KeyEvent.VK_LEFT || keyCode == KeyEvent.VK_A) {
            if(frontNote.inFieldOfPlay() && frontNote.getDirection() == 3){
                game.getScoreObj().streak(true);
                correctChoice(frontNote);
            }
            else{
                game.getScoreObj().streak(false);
            }
        }
    }

    public void paint(Graphics g) {

//        g.setColor(Color.DARK_GRAY);
//        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
//        g.fillRect(WINDOW_WIDTH/2 - 250, 0, 500, 1000);
        Color darkGreen = new Color(14, 104, 41);
        g.setColor(darkGreen);
        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
        g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        g.drawImage(background, WINDOW_WIDTH/2 - 250, 0, 500, 1000, this);

        //create scoreboard
        g.setColor(Color.DARK_GRAY);
        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
        g.fillRect(50, 100, 150, 150);
        //make border as well


//      Draw arrows
        for(int i = 0; i < game.getSequence().length; i++) {
            game.getSequence()[i].draw(g);
        }

        if(drawExplosion > 0){
            g.drawImage(explosion, frontNoteX, frontNoteFinalY, 50, 50, this);
        }
        drawExplosion--;
//        game.getNotes()[0].draw(g);
        game.getScoreObj().draw(g);
        up.draw(g);
        down.draw(g);
        right.draw(g);
        left.draw(g);
    }

    public void correctChoice(FallingNote frontNote){
        game.getScoreObj().addPoint();
        game.getScoreObj().bonus();
        game.getScoreObj().updateScore();
        frontNoteFinalY = frontNote.getY();
        frontNoteX = frontNote.getX();
        frontNote.scored();
        drawExplosion = 3;
        frontNoteNumber++;
    }

    public void incSpeed(int streak){
        for(int i = 0; i < game.getSequence().length; i++){
            game.getSequence()[i].increaseDY(streak);
        }
    }

    public int getButtonY(){
        return buttonY;
    }

    public Game getGame(){
        return game;
    }

    public FallingNote getFrontNote(){
        return frontNote;
    }
    public void setFrontNote(FallingNote newFrontNote){
        frontNote = newFrontNote;
    }

    public int getFrontNoteNumber(){
        return frontNoteNumber;
    }
    public void increaseFrontNoteNumber(){
        frontNoteNumber++;
    }

    public void lostGameScreen(){
        //how to get new one
        setTitle("You lost.");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(0, 0);
    }

}
