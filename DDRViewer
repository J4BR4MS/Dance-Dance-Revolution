import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import javax.sound.sampled.*;
import javax.swing.*;
import javax.sound.sampled.Clip;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.*;
import java.io.*;

public class DDRViewer extends JFrame implements KeyListener {
    private final int WINDOW_WIDTH = 1000;
    private final int WINDOW_HEIGHT = 1000;

    private Game game;
    private Button up;
    private Button down;
    private Button right;
    private Button left;
    private Image background;
    private FallingNote currentNote;
    private FallingNote frontNote;
    private int frontNoteNumber;
    private boolean drawExplosion;
    private Image explosion;
    private int frontNoteFinalY;
    private int frontNoteX;



    public int buttonY = WINDOW_HEIGHT - 161;
//    public int buttonWidth;

//    FallingNote test;

    public DDRViewer(Game game) {
        this.game = game;

        setTitle("Dance Dance Revolution");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);


        // Create the up arrow
        ImageIcon upIcon = new ImageIcon("Resources/upArrowButton.png");
        Image upImage = upIcon.getImage(); //is this line necessary? Why do I need a variable for this? Below I can just use this code instead of a variable.
        up = new Button(upImage, WINDOW_WIDTH / 2 - 57, buttonY, upIcon.getIconWidth() / 10, upIcon.getIconHeight() / 10, this);
//        buttonWidth = upIcon.getIconWidth()/10;

        // Create the down arrow
        ImageIcon downIcon = new ImageIcon("Resources/downArrowButton.png");
        Image downImage = downIcon.getImage();
        down = new Button(downImage, WINDOW_WIDTH / 2 + 57, buttonY, upIcon.getIconWidth() / 10, downIcon.getIconHeight() / 10, this);

        // Create the right arrow
        ImageIcon rightIcon = new ImageIcon("Resources/rightArrowButton.png");
        Image rightImage = rightIcon.getImage();
        right = new Button(rightImage, WINDOW_WIDTH / 2 + 170, buttonY, rightIcon.getIconWidth() / 10, rightIcon.getIconHeight() / 10, this);

        // Create the left arrow
        ImageIcon leftIcon = new ImageIcon("Resources/leftArrowButton.png");
        Image leftImage = leftIcon.getImage();
        left = new Button(leftImage, WINDOW_WIDTH / 2 - 170, buttonY, leftIcon.getIconWidth() / 10, leftIcon.getIconHeight() / 10, this);

        ImageIcon backgroundIcon = new ImageIcon("Resources/Background.png");
        background = backgroundIcon.getImage();

        ImageIcon explosionIcon = new ImageIcon("Resources/explosion.png");
        explosion = explosionIcon.getImage();

        //1126x1126
        //161x112.6
        // Add key listener and set visibility
        drawExplosion = false;
        frontNoteNumber = 0;
        addKeyListener(this);
        setVisible(true);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        frontNote = game.getSequence()[frontNoteNumber];
        if (keyCode == KeyEvent.VK_UP) {
            if(frontNote.inFieldOfPlay() && frontNote.direction == 0){
                game.getScoreObj().streak(true);
                correctChoice(frontNote);
            }
            else{
                game.getScoreObj().streak(false);
            }
        }
                if(keyCode == KeyEvent.VK_DOWN) {
                    if(frontNote.inFieldOfPlay() && frontNote.direction == 1){
                        game.getScoreObj().streak(true);
                        correctChoice(frontNote);
                    }
                    else{
                        game.getScoreObj().streak(false);
                    }
                }

                if(keyCode == KeyEvent.VK_RIGHT) {
                    if(frontNote.inFieldOfPlay() && frontNote.direction == 2){
                        game.getScoreObj().streak(true);
                        correctChoice(frontNote);
                    }
                    else{
                        game.getScoreObj().streak(false);
                    }
                }

                if(keyCode == KeyEvent.VK_LEFT) {
                    if(frontNote.inFieldOfPlay() && frontNote.direction == 3){
                        game.getScoreObj().streak(true);
                        correctChoice(frontNote);
                    }
                    else{
                        game.getScoreObj().streak(false);
                    }
                }
    }

    //                        else{
//                            game.getScoreObj().streak(false);
//                        }

    //                        else{
//                            game.getScoreObj().streak(false);
//                        }
//                    }

//        int i = 0;
//        while (!game.getSequence()[i].inFieldOfPlay() && game.getSequence()[i].direction != 0) {
//            i++;
//        }
//        correctChoice(i);



            //    int keyCode = e.getKeyCode();
            //
            //        if(keyCode == KeyEvent.VK_UP)
            //    {
            //        //Enlarge arrow
            //        up.enlarge();
            //        repaint();
            //        //Wait for a second
            //
            //        // Shrink arrow image back
            ////            up.shrink();
            ////            repaint();
            //    }
            ////        else if(keyCode == KeyEvent.VK_DOWN)
            ////        {
            ////            // Code for down arrow
            ////        }
            ////        else if(keyCode == KeyEvent.VK_LEFT)
            ////        {
            ////            // Code for left arrow
            ////        }
            ////        else if(keyCode == KeyEvent.VK_RIGHT)
            ////        {
            ////            // Code for right arrow
            ////        }

    public void correctChoice(FallingNote frontNote){
        game.getScoreObj().addPoint();
        game.getScoreObj().bonus();
        game.getScoreObj().updateScore();
        frontNoteFinalY = frontNote.getY();
        frontNoteX = frontNote.getX();
        frontNote.scored();
        drawExplosion = true;
        frontNoteNumber++;
//        frontNote = game.getSequence()[frontNoteNumber];
    }

    public void playSound(String soundFile, float volIncrease){
        try {
            File file = new File(soundFile);
            AudioInputStream stream;
            AudioFormat format;
            DataLine.Info info;
            Clip clip;
            stream = AudioSystem.getAudioInputStream(file);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
            FloatControl gainControl = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
            gainControl.setValue(gainControl.getValue() + volIncrease);
            clip.start();
        }
        catch (Exception e){
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    @Override
    public void keyTyped(KeyEvent e) {}
    // && game.getSequence()[i].direction = 0

//    public FallingNote getFrontNote(){
//        return frontNote;
//    }
    public void changeFrontNote(FallingNote isFrontNote){
        if(frontNote == isFrontNote){
            frontNoteNumber++;
            getScore().streak(false);
            if(frontNoteNumber == game.getSequence().length){
                game.getScoreObj().setFinalScore();
            }
            frontNote = game.getSequence()[frontNoteNumber];
            game.getScoreObj().subtractPoint();
        }
    }

    public void incSpeed(){
        for(int i = 0; i < game.getSequence().length; i++){
            game.getSequence()[i].increaseDY();
        }
    }

    public void incSpeedAgain(){
        for(int i = 0; i < game.getSequence().length; i++){
            game.getSequence()[i].increaseDYagain();
        }
    }

    public void lostGame(){
        //how to get new one
        setTitle("You lost.");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(0, 0);
    }

    public Score getScore(){
        return game.getScoreObj();
    }
    public void paint(Graphics g) {

//        g.setColor(Color.DARK_GRAY);
//        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
//        g.fillRect(WINDOW_WIDTH/2 - 250, 0, 500, 1000);
        Color darkGreen = new Color(14, 104, 41);
        g.setColor(darkGreen);
        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
        g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        g.drawImage(background, WINDOW_WIDTH/2 - 250, 0, 500, 1000, this);

        //create scoreboard
        g.setColor(Color.DARK_GRAY);
        // The rectangle must begin at 227 (plus change for visual appeal), which is the length of 2 button images.
        g.fillRect(50, 100, 150, 150);
        //make border as well
        g.setColor(Color.LIGHT_GRAY);
        g.drawString("\tHIGH SCORE:" + game.getHighScore(), 60, 175);

//      Draw arrows
        for(int i = 0; i < game.getSequence().length; i++) {
            game.getSequence()[i].draw(g);
        }

        if(drawExplosion){
            g.drawImage(explosion, frontNoteX, frontNoteFinalY, 50, 50, this);
        }
        drawExplosion = false;
//        game.getNotes()[0].draw(g);
        game.getScoreObj().draw(g);
        up.draw(g);
        down.draw(g);
        right.draw(g);
        left.draw(g);
    }
}
